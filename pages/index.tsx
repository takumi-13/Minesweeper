import type { NextPage } from 'next'
import Head from 'next/head'
import React, { useCallback, useRef, useState } from 'react'
import { BoardOrigin } from '../components/boardOrigin'
import { DifficultySelector } from '../components/difficultySelector'
import { Container, Main } from '../components/page'
import { BoardSize, DifficultyFirstStates, Pos } from '../types/type'
import { createBom } from '../utils/bom'
import { FIRST_STATE_COMMON, FIRST_STATE_EASY } from '../utils/firstState'

const Home: NextPage = () => {
  if (typeof document !== 'undefined') document.oncontextmenu = () => false

  const [nowFirstState, setNowFirstState] = useState<DifficultyFirstStates>(FIRST_STATE_EASY)

  const refreshStateWithDifficulty = (values: DifficultyFirstStates) => {
    refreshStateCommon()
    setNowFirstState(values)
    setBoardSize({ sizeX: values.sizeX, sizeY: values.sizeY })
    setBoard(values.board)
    setBoms(createBom(values.bomNum, values.sizeX, values.sizeY))
  }

  const refreshState = () => {
    refreshStateCommon()
    setBoardSize({ sizeX: nowFirstState.sizeX, sizeY: nowFirstState.sizeY })
    setBoard(nowFirstState.board)
    setBoms(createBom(nowFirstState.bomNum, nowFirstState.sizeX, nowFirstState.sizeY))
  }

  const refreshStateCommon = () => {
    setGameState(FIRST_STATE_COMMON.gameState)
    setFlgPosition(FIRST_STATE_COMMON.flgPosition)
    setCount(FIRST_STATE_COMMON.count)
    setPushedBlockNum(0)
    countStop()
  }
  //-1:PreStart, 0:Normal, 1:Clear, 99:Gameover
  const [gameState, setGameState] = useState(FIRST_STATE_COMMON.gameState)

  // -1:爆弾, 1-8:クリック済み, 9:未クリック, 99:フラグ, 100: ?
  const [board, setBoard] = useState(nowFirstState.board)
  const [flgPosition, setFlgPosition] = useState<Pos[]>(FIRST_STATE_COMMON.flgPosition)
  const [count, setCount] = useState(FIRST_STATE_COMMON.count)
  const [boms, setBoms] = useState(
    createBom(nowFirstState.bomNum, nowFirstState.sizeX, nowFirstState.sizeY)
  )
  const [pushedBlockNum, setPushedBlockNum] = useState(0)
  const [boardSize, setBoardSize] = useState<BoardSize>({
    sizeX: nowFirstState.sizeX,
    sizeY: nowFirstState.sizeY,
  })

  const states = { gameState, board, flgPosition, count, boms, pushedBlockNum, boardSize }

  const intervalRef = useRef<number | null>(null)
  const countStart = useCallback(() => {
    if (intervalRef.current !== null) {
      return
    }
    intervalRef.current = window.setInterval(() => {
      setCount((c) => c + 1)
    }, 1000)
  }, [])
  const countStop = useCallback(() => {
    if (intervalRef.current === null) {
      return
    }
    clearInterval(intervalRef.current)
    intervalRef.current = null
  }, [])

  const setGameClear = () => {
    setGameState(1)
    countStop()
  }
  const setGameover = () => {
    setGameState(99)
    countStop()
  }

  const checkGameStart = (): boolean => {
    if (gameState === -1) {
      setGameState(0)
      countStart()
      return true
    }
    return false
  }

  return (
    <Container>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Main>
        <DifficultySelector
          states={{ boardSize, boms, nowFirstState }}
          funs={{
            refreshStateWithDifficulty,
          }}
        />
        <BoardOrigin
          parentStates={states}
          funs={{
            refreshState,
            checkGameStart,
            setGameover,
            setGameClear,
            setGameState,
            setPushedBlockNum,
            setFlgPosition,
            setBoard,
            setBoms,
          }}
        />
      </Main>
    </Container>
  )
}
export default Home
